// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package txwhitelist

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/allowlist"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	// This contract also uses AllowList precompile.
	// You should also increase gas costs of functions that read from AllowList storage.
	GetTxWhitelistStatusGasCost uint64 = 1 /* SET A GAS COST HERE */
	SetTxWhitelistStatusGasCost uint64 = 1 /* SET A GAS COST HERE */ + allowlist.ReadAllowListGasCost
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	ErrCannotSetTxWhitelistStatus = errors.New("non-enabled cannot call setTxWhitelistStatus")

	// TxWhitelistRawABI contains the raw ABI of TxWhitelist contract.
	//go:embed contract.abi
	TxWhitelistRawABI string

	TxWhitelistABI = contract.ParseABI(TxWhitelistRawABI)

	TxWhitelistPrecompile = createTxWhitelistPrecompile()
)

type GetTxWhitelistStatusInput struct {
	ContractAddress common.Address
	Method          []byte
}

type SetTxWhitelistStatusInput struct {
	ContractAddress common.Address
	Method          []byte
	Status          bool
}

// GetTxWhitelistAllowListStatus returns the role of [address] for the TxWhitelist list.
func GetTxWhitelistAllowListStatus(stateDB contract.StateDB, address common.Address) allowlist.Role {
	return allowlist.GetAllowListStatus(stateDB, ContractAddress, address)
}

// SetTxWhitelistAllowListStatus sets the permissions of [address] to [role] for the
// TxWhitelist list. Assumes [role] has already been verified as valid.
// This stores the [role] in the contract storage with address [ContractAddress]
// and [address] hash. It means that any reusage of the [address] key for different value
// conflicts with the same slot [role] is stored.
// Precompile implementations must use a different key than [address] for their storage.
func SetTxWhitelistAllowListStatus(stateDB contract.StateDB, address common.Address, role allowlist.Role) {
	allowlist.SetAllowListRole(stateDB, ContractAddress, address, role)
}

// SetWhitelistStatus sets the permissions of [address][hash] to [status] for the
// assumes [status] has already been verified as valid.
func SetTxWhitelistStatus(stateDB contract.StateDB, address common.Address, method []byte, status common.Hash) {
	// Generate the state key for [address]
	hash := common.BytesToHash(append(address[:], method[:]...))
	//addressKey := address.Hash()
	// Assign [status] to the address
	// This stores the [status] in the contract storage with address [ContractAddress]
	// and [addressKey] hash. It means that any reusage of the [addressKey] for different value
	// conflicts with the same slot [status] is stored.
	// Precompile implementations must use a different key than [addressKey]
	stateDB.SetState(ContractAddress, hash, status)
}

// GetWhiteListStatus returns the status of [address] for the whitelist.
func GetTxWhitelistStatus(stateDB contract.StateDB, address common.Address, method []byte) bool {
	hash := common.BytesToHash(append(address[:], method[:]...))
	//addressKey := address.Hash()

	return stateDB.GetState(ContractAddress, hash).Big().Cmp(common.Big1) == 0
}

// UnpackGetTxWhitelistStatusInput attempts to unpack [input] as GetTxWhitelistStatusInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetTxWhitelistStatusInput(input []byte) (GetTxWhitelistStatusInput, error) {
	inputStruct := GetTxWhitelistStatusInput{}
	err := TxWhitelistABI.UnpackInputIntoInterface(&inputStruct, "getTxWhitelistStatus", input, false)

	return inputStruct, err
}

// PackGetTxWhitelistStatus packs [inputStruct] of type GetTxWhitelistStatusInput into the appropriate arguments for getTxWhitelistStatus.
func PackGetTxWhitelistStatus(inputStruct GetTxWhitelistStatusInput) ([]byte, error) {
	return TxWhitelistABI.Pack("getTxWhitelistStatus", inputStruct.ContractAddress, inputStruct.Method)
}

// PackGetTxWhitelistStatusOutput attempts to pack given status of type bool
// to conform the ABI outputs.
func PackGetTxWhitelistStatusOutput(status bool) ([]byte, error) {
	return TxWhitelistABI.PackOutput("getTxWhitelistStatus", status)
}

// UnpackGetTxWhitelistStatusOutput attempts to unpack given [output] into the bool type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetTxWhitelistStatusOutput(output []byte) (bool, error) {
	res, err := TxWhitelistABI.Unpack("getTxWhitelistStatus", output)
	if err != nil {
		return false, err
	}
	unpacked := *abi.ConvertType(res[0], new(bool)).(*bool)
	return unpacked, nil
}

func getTxWhitelistStatus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetTxWhitelistStatusGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetTxWhitelistStatusInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetTxWhitelistStatusInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	stateDB := accessibleState.GetStateDB()

	var output = GetTxWhitelistStatus(stateDB, inputStruct.ContractAddress, inputStruct.Method)
	packedOutput, err := PackGetTxWhitelistStatusOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}
	

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSetTxWhitelistStatusInput attempts to unpack [input] as SetTxWhitelistStatusInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSetTxWhitelistStatusInput(input []byte) (SetTxWhitelistStatusInput, error) {
	inputStruct := SetTxWhitelistStatusInput{}
	err := TxWhitelistABI.UnpackInputIntoInterface(&inputStruct, "setTxWhitelistStatus", input, false)

	return inputStruct, err
}

// PackSetTxWhitelistStatus packs [inputStruct] of type SetTxWhitelistStatusInput into the appropriate arguments for setTxWhitelistStatus.
func PackSetTxWhitelistStatus(inputStruct SetTxWhitelistStatusInput) ([]byte, error) {
	return TxWhitelistABI.Pack("setTxWhitelistStatus", inputStruct.ContractAddress, inputStruct.Method, inputStruct.Status)
}

func setTxWhitelistStatus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SetTxWhitelistStatusGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SetTxWhitelistStatusInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSetTxWhitelistStatusInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// Allow list is enabled and SetTxWhitelistStatus is a state-changer function.
	// This part of the code restricts the function to be called only by enabled/admin addresses in the allow list.
	// You can modify/delete this code if you don't want this function to be restricted by the allow list.
	stateDB := accessibleState.GetStateDB()
	// Verify that the caller is in the allow list and therefore has the right to call this function.
	callerStatus := allowlist.GetAllowListStatus(stateDB, ContractAddress, caller)
	if !callerStatus.IsEnabled() {
		return nil, remainingGas, fmt.Errorf("%w: %s", ErrCannotSetTxWhitelistStatus, caller)
	}
	// allow list code ends here.

	eventData := TxWhitelistChangedEventData{
		Status: inputStruct.Status,
	};

	status := common.BigToHash(common.Big0);

	if inputStruct.Status {
		status = common.BigToHash(common.Big1)
	}

	SetTxWhitelistStatus(stateDB, inputStruct.ContractAddress, inputStruct.Method , status)


	topics, data, err := PackTxWhitelistChangedEvent(
		inputStruct.ContractAddress,
		inputStruct.Method,
		eventData,
	)

	if err != nil {
		return nil, remainingGas, err
	}

	if remainingGas, err = contract.DeductGas(remainingGas, GetTxWhitelistChangedEventGasCost(eventData)); err != nil {
		return nil, 0, err
	}

	accessibleState.GetStateDB().AddLog(
		ContractAddress,
		topics,
		data,
		accessibleState.GetBlockContext().Number().Uint64(),
	)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createTxWhitelistPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
// Access to the getters/setters is controlled by an allow list for ContractAddress.
func createTxWhitelistPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction
	functions = append(functions, allowlist.CreateAllowListFunctions(ContractAddress)...)

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getTxWhitelistStatus": getTxWhitelistStatus,
		"setTxWhitelistStatus": setTxWhitelistStatus,
	}

	for name, function := range abiFunctionMap {
		method, ok := TxWhitelistABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
